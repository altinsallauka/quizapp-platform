[{"C:\\projects\\quiz-node-api-master\\client\\src\\index.js":"1","C:\\projects\\quiz-node-api-master\\client\\src\\App.js":"2","C:\\projects\\quiz-node-api-master\\client\\src\\reportWebVitals.js":"3","C:\\projects\\quiz-node-api-master\\client\\src\\components\\PostQuestion.jsx":"4","C:\\projects\\quizapp-mern\\client\\src\\index.js":"5","C:\\projects\\quizapp-mern\\client\\src\\reportWebVitals.js":"6","C:\\projects\\quizapp-mern\\client\\src\\App.js":"7","C:\\projects\\quizapp-mern\\client\\src\\components\\dashboard\\create-question\\PostQuestion.jsx":"8","C:\\projects\\quizapp-mern\\client\\src\\components\\dashboard\\Dashboard.jsx":"9","C:\\projects\\quizapp-mern\\client\\src\\components\\role-page\\RolePage.jsx":"10","C:\\projects\\quizapp-mern\\client\\src\\components\\dashboard\\create-category\\PostCategory.jsx":"11","C:\\projects\\quizapp-mern\\client\\src\\components\\login\\Login.jsx":"12","C:\\projects\\quizapp-mern\\client\\src\\components\\dashboard\\categories\\CategoriesList.jsx":"13","C:\\projects\\quizapp-mern\\client\\src\\components\\dashboard\\questions\\QuestionsList.jsx":"14","C:\\projects\\quizapp-mern\\client\\src\\components\\dashboard\\nav-bar\\NavBar.jsx":"15","C:\\projects\\quizapp-mern\\client\\src\\components\\dashboard\\users\\UsersList.jsx":"16","C:\\projects\\quizapp-mern\\client\\src\\components\\dashboard\\register-user\\RegisterUser.jsx":"17","C:\\projects\\quizapp-mern\\client\\src\\components\\dashboard\\my-profile\\MyProfile.jsx":"18","C:\\projects\\quizapp-mern\\client\\src\\components\\dashboard\\roles\\RolesList.jsx":"19","C:\\projects\\quizapp-mern\\client\\src\\components\\dashboard\\create-role\\PostRole.jsx":"20"},{"size":500,"mtime":499162500000,"results":"21","hashOfConfig":"22"},{"size":1107,"mtime":1620421164663,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"22"},{"size":3678,"mtime":1620422828388,"results":"25","hashOfConfig":"22"},{"size":517,"mtime":1621032218506,"results":"26","hashOfConfig":"27"},{"size":375,"mtime":1620688451552,"results":"28","hashOfConfig":"27"},{"size":2637,"mtime":1626102418330,"results":"29","hashOfConfig":"27"},{"size":5288,"mtime":1625747398003,"results":"30","hashOfConfig":"27"},{"size":2352,"mtime":1626102430341,"results":"31","hashOfConfig":"27"},{"size":640,"mtime":1625257705905,"results":"32","hashOfConfig":"27"},{"size":1690,"mtime":1621607236276,"results":"33","hashOfConfig":"27"},{"size":3285,"mtime":1626103162462,"results":"34","hashOfConfig":"27"},{"size":5859,"mtime":1625741287063,"results":"35","hashOfConfig":"27"},{"size":12190,"mtime":1625664314288,"results":"36","hashOfConfig":"27"},{"size":3856,"mtime":1625685413256,"results":"37","hashOfConfig":"27"},{"size":10674,"mtime":1626093827879,"results":"38","hashOfConfig":"27"},{"size":3523,"mtime":1625750091757,"results":"39","hashOfConfig":"27"},{"size":3846,"mtime":1625665314807,"results":"40","hashOfConfig":"27"},{"size":5457,"mtime":1626089576757,"results":"41","hashOfConfig":"27"},{"size":1624,"mtime":1625742851451,"results":"42","hashOfConfig":"27"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"og8y6w",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"rn6tey",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"C:\\projects\\quiz-node-api-master\\client\\src\\index.js",[],["86","87"],"C:\\projects\\quiz-node-api-master\\client\\src\\App.js",[],"C:\\projects\\quiz-node-api-master\\client\\src\\reportWebVitals.js",[],"C:\\projects\\quiz-node-api-master\\client\\src\\components\\PostQuestion.jsx",[],"C:\\projects\\quizapp-mern\\client\\src\\index.js",[],["88","89"],"C:\\projects\\quizapp-mern\\client\\src\\reportWebVitals.js",[],"C:\\projects\\quizapp-mern\\client\\src\\App.js",[],"C:\\projects\\quizapp-mern\\client\\src\\components\\dashboard\\create-question\\PostQuestion.jsx",[],"C:\\projects\\quizapp-mern\\client\\src\\components\\dashboard\\Dashboard.jsx",[],"C:\\projects\\quizapp-mern\\client\\src\\components\\role-page\\RolePage.jsx",[],"C:\\projects\\quizapp-mern\\client\\src\\components\\dashboard\\create-category\\PostCategory.jsx",[],"C:\\projects\\quizapp-mern\\client\\src\\components\\login\\Login.jsx",[],"C:\\projects\\quizapp-mern\\client\\src\\components\\dashboard\\categories\\CategoriesList.jsx",[],"C:\\projects\\quizapp-mern\\client\\src\\components\\dashboard\\questions\\QuestionsList.jsx",[],"C:\\projects\\quizapp-mern\\client\\src\\components\\dashboard\\nav-bar\\NavBar.jsx",[],"C:\\projects\\quizapp-mern\\client\\src\\components\\dashboard\\users\\UsersList.jsx",["90"],"import React from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./UsersList.scss\";\r\n// import editImageSrc from \"../../../assets/edit.png\";\r\n// import deleteImageSrc from \"../../../assets/delete.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\r\n// import * as ReactBootStrap from \"react-bootstrap\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport RolesList from \"../roles/RolesList\";\r\nexport default class UsersList extends React.Component {\r\n  constructor() {\r\n    super();\r\n    let adminCheck = false;\r\n    this.state = {\r\n      rowId: \"\",\r\n      users: [],\r\n      numberOfusers: \"\",\r\n      adminColumns: [\r\n        // {\r\n        //   dataField: \"_id\",\r\n        //   text: \"ID\",\r\n        // },\r\n        // { dataField: \"firstName\", text: \"Name\" },\r\n        // { dataField: \"lastName\", text: \"Last Name\" },\r\n        { dataField: \"username\", text: \"Username\" },\r\n        {\r\n          dataField: \"update\",\r\n          text: \"Update\",\r\n          editable: false,\r\n          formatter: (cellContent, row) => {\r\n            this.setState({ rowId: row.id });\r\n            return (\r\n              <button\r\n                className=\"btn btn-primary btn-xs\"\r\n                // onClick={() => console.log(\"updated\", row._id)}\r\n                onClick={() => this.handleModalUpdate(row.id)}\r\n              >\r\n                Edit\r\n              </button>\r\n            );\r\n          },\r\n        },\r\n        {\r\n          dataField: \"delete\",\r\n          text: \"Delete\",\r\n          editable: false,\r\n          formatter: (cellContent, row) => {\r\n            this.setState({ rowId: row.id });\r\n            return (\r\n              <button\r\n                className=\"btn btn-danger btn-xs\"\r\n                // onClick={() => console.log(\"deleted\", row._id)}\r\n                onClick={() => this.handleModalDelete(row.id)}\r\n              >\r\n                Delete\r\n              </button>\r\n            );\r\n          },\r\n        },\r\n      ],\r\n      notAdminColumns: [{ dataField: \"username\", text: \"Username\" }],\r\n      showHideDelete: false,\r\n      showHideUpdate: false,\r\n      toUpdate: [],\r\n      roles: [],\r\n      isAdmin: adminCheck,\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  handleChange(event) {\r\n    this.setState({\r\n      toUpdate: {\r\n        ...this.state.toUpdate,\r\n        [event.target.name]: event.target.value,\r\n      },\r\n    });\r\n  }\r\n  getCurrentUser() {\r\n    const access_token = localStorage.getItem(\"token\");\r\n\r\n    axios\r\n      .get(\"http://localhost:3001/users/current\", {\r\n        headers: {\r\n          Authorization: `Bearer ${access_token}`,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        console.log(res.data);\r\n        const user = res.data;\r\n        // this.setState({ user });\r\n        axios\r\n          .get(`http://localhost:3001/roles/${user.roleId}`)\r\n          .then((response) => {\r\n            console.log(\"Role by ID\", response.data);\r\n            if (response.data.role === \"Admin\") {\r\n              this.setState({ isAdmin: true });\r\n            } else {\r\n              this.setState({ isAdmin: false });\r\n            }\r\n          });\r\n        return true;\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }\r\n  async handleSubmit(event) {\r\n    event.preventDefault();\r\n    // const { firstName, lastName } = this.state;\r\n    const access_token = localStorage.getItem(\"token\");\r\n    const updateUser = {\r\n      firstName: this.state.toUpdate.firstName,\r\n      lastName: this.state.toUpdate.lastName,\r\n    };\r\n    const { data } = await axios.put(\r\n      `http://localhost:3001/users/${this.state.rowId}`,\r\n      updateUser,\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${access_token}`,\r\n        },\r\n      }\r\n    );\r\n    this.getusers();\r\n    this.setState({ showHideUpdate: !this.state.showHideUpdate });\r\n    console.log(data.data);\r\n    this.props.history.push(\"/users\");\r\n  }\r\n  handleModalDelete(id) {\r\n    this.setState({ showHideDelete: !this.state.showHideDelete, rowId: id });\r\n  }\r\n  handleModalUpdate(id) {\r\n    this.setState({ showHideUpdate: !this.state.showHideUpdate, rowId: id });\r\n\r\n    const access_token = localStorage.getItem(\"token\");\r\n    axios\r\n      .get(`http://localhost:3001/users/${id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${access_token}`,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        console.log(\"user\", res.data);\r\n        this.setState({ toUpdate: res.data });\r\n        this.getRoleById();\r\n      });\r\n  }\r\n  getRoleById() {\r\n    axios\r\n      .get(`http://localhost:3001/roles/${this.state.toUpdate.roleId}`)\r\n      .then((res) => {\r\n        console.log(res.data);\r\n        const { roleId } = this.state;\r\n        this.setState({\r\n          roleId: res.data._id,\r\n        });\r\n      });\r\n  }\r\n  getusers() {\r\n    const access_token = localStorage.getItem(\"token\");\r\n\r\n    axios\r\n      .get(\"http://localhost:3001/users\", {\r\n        headers: {\r\n          Authorization: `Bearer ${access_token}`,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        console.log(res.data);\r\n        const users = res.data;\r\n        this.setState({ users });\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }\r\n  deleteRow(id) {\r\n    const access_token = localStorage.getItem(\"token\");\r\n\r\n    axios\r\n      .delete(`http://localhost:3001/users/${this.state.rowId}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${access_token}`,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        this.handleModalDelete();\r\n        this.getusers();\r\n      });\r\n  }\r\n  getRoles() {\r\n    axios.get(\"http://localhost:3001/roles\").then((res) => {\r\n      this.setState({ roles: res.data });\r\n    });\r\n  }\r\n  componentDidMount() {\r\n    this.getusers();\r\n    this.getRoles();\r\n    this.getCurrentUser();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"row mt-3 pt-4\">\r\n          {this.state.isAdmin ? (\r\n            <Link to={\"/register\"} className=\"nav-link\">\r\n              <h2>Register User</h2>\r\n              <hr />\r\n            </Link>\r\n          ) : null}\r\n\r\n          {/* {this.state.isAdmin ? <span>Admin</span> : null} */}\r\n          <h6>List of users</h6>\r\n          {this.state.isAdmin ? (\r\n            <BootstrapTable\r\n              keyField=\"id\"\r\n              data={this.state.users}\r\n              columns={this.state.adminColumns}\r\n              pagination={paginationFactory()}\r\n            />\r\n          ) : (\r\n            <BootstrapTable\r\n              keyField=\"id\"\r\n              data={this.state.users}\r\n              columns={this.state.notAdminColumns}\r\n              pagination={paginationFactory()}\r\n            />\r\n          )}\r\n          {this.state.isAdmin ? (\r\n            <div className=\"mt-4\">\r\n              <hr />\r\n              <RolesList />\r\n            </div>\r\n          ) : null}\r\n\r\n          {/* Delete */}\r\n          <Modal show={this.state.showHideDelete}>\r\n            <Modal.Header closeButton onClick={() => this.handleModalDelete()}>\r\n              <Modal.Title>Are you sure?</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              Do you really want to delete this user? This process cannot be\r\n              undone.\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={() => this.handleModalDelete()}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                variant=\"danger\"\r\n                onClick={() => this.deleteRow(this.state.rowId)}\r\n              >\r\n                Delete\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Modal>\r\n\r\n          {/* Update */}\r\n          <Modal show={this.state.showHideUpdate}>\r\n            <form onSubmit={(e) => this.handleSubmit(e)}>\r\n              <Modal.Header\r\n                closeButton\r\n                onClick={() => this.handleModalUpdate()}\r\n              >\r\n                <Modal.Title>Update user</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <label className=\"d-flex flex-column align-items-start\">\r\n                  First Name:\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"firstName\"\r\n                    value={this.state.toUpdate.firstName}\r\n                    className=\"form-control\"\r\n                    onChange={this.handleChange}\r\n                  />\r\n                </label>\r\n                <label className=\"d-flex flex-column align-items-start\">\r\n                  Last Name:\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"lastName\"\r\n                    className=\"form-control\"\r\n                    value={this.state.toUpdate.lastName}\r\n                    onChange={this.handleChange}\r\n                  />\r\n                </label>\r\n                <div className=\"d-flex align-items-center\">\r\n                  <label className=\"d-flex flex-column align-items-start\">\r\n                    Role:\r\n                    <select\r\n                      className=\"form-select\"\r\n                      name=\"roleId\"\r\n                      aria-label=\"Default select example\"\r\n                      value={this.state.toUpdate.roleId}\r\n                      onChange={this.handleChange}\r\n                    >\r\n                      <option disabled selected>\r\n                        Select one role\r\n                      </option>\r\n                      {this.state.roles.map((userRole) => (\r\n                        <option value={userRole._id} key={userRole._id}>\r\n                          {userRole.role}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                  </label>\r\n                </div>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button\r\n                  variant=\"secondary\"\r\n                  onClick={() => this.handleModalUpdate()}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n                <Button\r\n                  type=\"submit\"\r\n                  value=\"submit\"\r\n                  variant=\"primary\"\r\n                  // onClick={() => this.deleteRow(this.state.rowId)}\r\n                  // onClick={() => this.handleSubmit()}\r\n                >\r\n                  Update\r\n                </Button>\r\n              </Modal.Footer>\r\n            </form>\r\n          </Modal>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\projects\\quizapp-mern\\client\\src\\components\\dashboard\\register-user\\RegisterUser.jsx",[],"C:\\projects\\quizapp-mern\\client\\src\\components\\dashboard\\my-profile\\MyProfile.jsx",[],"C:\\projects\\quizapp-mern\\client\\src\\components\\dashboard\\roles\\RolesList.jsx",[],"C:\\projects\\quizapp-mern\\client\\src\\components\\dashboard\\create-role\\PostRole.jsx",[],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"91","replacedBy":"95"},{"ruleId":"93","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":156,"column":17,"nodeType":"99","messageId":"100","endLine":156,"endColumn":23},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],["101"],["102"],"no-unused-vars","'roleId' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]